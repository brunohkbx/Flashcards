// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeckForm displays an error message when the input is invalid 1`] = `
<Component>
  <withTheme(TextInput)
    autoFocus={true}
    error={true}
    label="Title"
    onBlur={[Function]}
    onChangeText={[Function]}
  />
  <withTheme(HelperText)
    type="error"
    visible={true}
  >
    Required
  </withTheme(HelperText)>
</Component>
`;

exports[`DeckForm renders properly 1`] = `
<Component>
  <withTheme(TextInput)
    autoFocus={true}
    error={false}
    label="Title"
    onBlur={[Function]}
    onChangeText={[Function]}
  />
  <withTheme(HelperText)
    type="error"
    visible={false}
  />
</Component>
`;

exports[`FormikDeckForm renders properly 1`] = `
<Formik
  component={[Function]}
  enableReinitialize={true}
  initialValues={
    Object {
      "questions": Array [],
      "title": "",
    }
  }
  isInitialValid={false}
  onSubmit={[Function]}
  validateOnBlur={false}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "title",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "title": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;
