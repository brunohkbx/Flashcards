// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeckForm renders properly 1`] = `
<Component
  style={
    Object {
      "flex": 1,
      "padding": 8,
    }
  }
>
  <KeyboardAvoidingView
    behavior="padding"
    enabled={true}
    keyboardVerticalOffset={94}
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <FormContent
      errors={Object {}}
      handleBlur={[MockFunction]}
      handleChange={[MockFunction]}
      handleContentSizeChange={[Function]}
      scrollViewRef={[Function]}
      touched={Object {}}
      values={Object {}}
    />
  </KeyboardAvoidingView>
  <Styled(Component)>
    <FAB
      handlePress={[Function]}
      primary={false}
    />
  </Styled(Component)>
</Component>
`;

exports[`FormikDeckForm renders properly 1`] = `
<Formik
  component={[Function]}
  enableReinitialize={true}
  initialValues={
    Object {
      "id": "606a1255-bac9-4f56-bc9e-d7b2ed696a35",
      "questions": Array [],
      "title": "",
    }
  }
  isInitialValid={false}
  onSubmit={[Function]}
  validateOnBlur={false}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "questions",
        "title",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "questions": ArraySchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_subType": ObjectSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_defaultDefault": [Function],
            "_deps": Array [],
            "_excludedEdges": Array [],
            "_exclusive": Object {},
            "_mutate": false,
            "_nodes": Array [
              "answer",
              "question",
            ],
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "object",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "fields": Object {
              "answer": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": false,
                },
                "_mutate": false,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
              "question": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": false,
                },
                "_mutate": false,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
          "_type": "array",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        },
        "title": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;
